// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>De.AHoerstemeier.Tambon</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace De.AHoerstemeier.Tambon {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    
    
    public enum MyUriStatus {
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        online,
        
        /// <remarks/>
        offline,
        
        /// <remarks/>
        obsolete,
        
        /// <remarks/>
        expired,
    }
    
    public partial class Office : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Point pointField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ThaiAddress addressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<MyUri> urlField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private OfficialList officialsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<OldLocation> oldlocationsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private OfficeType typeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool obsoleteField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool obsoleteFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string commentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Office class constructor
        /// </summary>
        public Office() {
            this.oldlocationsField = new List<OldLocation>();
            this.officialsField = new OfficialList();
            this.urlField = new List<MyUri>();
            this.addressField = new ThaiAddress();
            this.pointField = new Point();
        }
        
        public Point Point {
            get {
                return this.pointField;
            }
            set {
                if ((this.pointField != null)) {
                    if ((pointField.Equals(value) != true)) {
                        this.pointField = value;
                        this.OnPropertyChanged("Point");
                    }
                }
                else {
                    this.pointField = value;
                    this.OnPropertyChanged("Point");
                }
            }
        }
        
        public ThaiAddress address {
            get {
                return this.addressField;
            }
            set {
                if ((this.addressField != null)) {
                    if ((addressField.Equals(value) != true)) {
                        this.addressField = value;
                        this.OnPropertyChanged("address");
                    }
                }
                else {
                    this.addressField = value;
                    this.OnPropertyChanged("address");
                }
            }
        }
        
        public List<MyUri> url {
            get {
                return this.urlField;
            }
            set {
                if ((this.urlField != null)) {
                    if ((urlField.Equals(value) != true)) {
                        this.urlField = value;
                        this.OnPropertyChanged("url");
                    }
                }
                else {
                    this.urlField = value;
                    this.OnPropertyChanged("url");
                }
            }
        }
        
        public OfficialList officials {
            get {
                return this.officialsField;
            }
            set {
                if ((this.officialsField != null)) {
                    if ((officialsField.Equals(value) != true)) {
                        this.officialsField = value;
                        this.OnPropertyChanged("officials");
                    }
                }
                else {
                    this.officialsField = value;
                    this.OnPropertyChanged("officials");
                }
            }
        }
        
        public List<OldLocation> oldlocations {
            get {
                return this.oldlocationsField;
            }
            set {
                if ((this.oldlocationsField != null)) {
                    if ((oldlocationsField.Equals(value) != true)) {
                        this.oldlocationsField = value;
                        this.OnPropertyChanged("oldlocations");
                    }
                }
                else {
                    this.oldlocationsField = value;
                    this.OnPropertyChanged("oldlocations");
                }
            }
        }
        
        public OfficeType type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("type");
                }
            }
        }
        
        public bool obsolete {
            get {
                return this.obsoleteField;
            }
            set {
                if ((obsoleteField.Equals(value) != true)) {
                    this.obsoleteField = value;
                    this.OnPropertyChanged("obsolete");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool obsoleteSpecified {
            get {
                return this.obsoleteFieldSpecified;
            }
            set {
                if ((obsoleteFieldSpecified.Equals(value) != true)) {
                    this.obsoleteFieldSpecified = value;
                    this.OnPropertyChanged("obsoleteSpecified");
                }
            }
        }
        
        public string comment {
            get {
                return this.commentField;
            }
            set {
                if ((this.commentField != null)) {
                    if ((commentField.Equals(value) != true)) {
                        this.commentField = value;
                        this.OnPropertyChanged("comment");
                    }
                }
                else {
                    this.commentField = value;
                    this.OnPropertyChanged("comment");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Office));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Office object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Office object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Office object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Office obj, out System.Exception exception) {
            exception = null;
            obj = default(Office);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Office obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Office Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Office)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Office object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Office object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Office object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Office obj, out System.Exception exception) {
            exception = null;
            obj = default(Office);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Office obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Office LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Office object
        /// </summary>
        public virtual Office Clone() {
            return ((Office)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public partial class OldLocation : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Point pointField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ThaiAddress addressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime endField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool endFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string commentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// OldLocation class constructor
        /// </summary>
        public OldLocation() {
            this.addressField = new ThaiAddress();
        }
        
        public Point Point {
            get {
                return this.pointField;
            }
            set {
                if ((this.pointField != null)) {
                    if ((pointField.Equals(value) != true)) {
                        this.pointField = value;
                        this.OnPropertyChanged("Point");
                    }
                }
                else {
                    this.pointField = value;
                    this.OnPropertyChanged("Point");
                }
            }
        }
        
        public ThaiAddress address {
            get {
                return this.addressField;
            }
            set {
                if ((this.addressField != null)) {
                    if ((addressField.Equals(value) != true)) {
                        this.addressField = value;
                        this.OnPropertyChanged("address");
                    }
                }
                else {
                    this.addressField = value;
                    this.OnPropertyChanged("address");
                }
            }
        }
        
        public System.DateTime end {
            get {
                return this.endField;
            }
            set {
                if ((endField.Equals(value) != true)) {
                    this.endField = value;
                    this.OnPropertyChanged("end");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endSpecified {
            get {
                return this.endFieldSpecified;
            }
            set {
                if ((endFieldSpecified.Equals(value) != true)) {
                    this.endFieldSpecified = value;
                    this.OnPropertyChanged("endSpecified");
                }
            }
        }
        
        public string comment {
            get {
                return this.commentField;
            }
            set {
                if ((this.commentField != null)) {
                    if ((commentField.Equals(value) != true)) {
                        this.commentField = value;
                        this.OnPropertyChanged("comment");
                    }
                }
                else {
                    this.commentField = value;
                    this.OnPropertyChanged("comment");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OldLocation));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OldLocation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OldLocation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OldLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OldLocation obj, out System.Exception exception) {
            exception = null;
            obj = default(OldLocation);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OldLocation obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OldLocation Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OldLocation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OldLocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OldLocation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OldLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OldLocation obj, out System.Exception exception) {
            exception = null;
            obj = default(OldLocation);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OldLocation obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OldLocation LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this OldLocation object
        /// </summary>
        public virtual OldLocation Clone() {
            return ((OldLocation)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public partial class ThaiAddress : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ThaiAddressVillage villageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string plotField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ThaiAddressTambon tambonField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string streetField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private uint postcodeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool postcodeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThaiAddress class constructor
        /// </summary>
        public ThaiAddress() {
            this.tambonField = new ThaiAddressTambon();
            this.villageField = new ThaiAddressVillage();
        }
        
        public ThaiAddressVillage village {
            get {
                return this.villageField;
            }
            set {
                if ((this.villageField != null)) {
                    if ((villageField.Equals(value) != true)) {
                        this.villageField = value;
                        this.OnPropertyChanged("village");
                    }
                }
                else {
                    this.villageField = value;
                    this.OnPropertyChanged("village");
                }
            }
        }
        
        public string plot {
            get {
                return this.plotField;
            }
            set {
                if ((this.plotField != null)) {
                    if ((plotField.Equals(value) != true)) {
                        this.plotField = value;
                        this.OnPropertyChanged("plot");
                    }
                }
                else {
                    this.plotField = value;
                    this.OnPropertyChanged("plot");
                }
            }
        }
        
        public ThaiAddressTambon tambon {
            get {
                return this.tambonField;
            }
            set {
                if ((this.tambonField != null)) {
                    if ((tambonField.Equals(value) != true)) {
                        this.tambonField = value;
                        this.OnPropertyChanged("tambon");
                    }
                }
                else {
                    this.tambonField = value;
                    this.OnPropertyChanged("tambon");
                }
            }
        }
        
        public string street {
            get {
                return this.streetField;
            }
            set {
                if ((this.streetField != null)) {
                    if ((streetField.Equals(value) != true)) {
                        this.streetField = value;
                        this.OnPropertyChanged("street");
                    }
                }
                else {
                    this.streetField = value;
                    this.OnPropertyChanged("street");
                }
            }
        }
        
        public uint postcode {
            get {
                return this.postcodeField;
            }
            set {
                if ((this.postcodeField != null)) {
                    if ((postcodeField.Equals(value) != true)) {
                        this.postcodeField = value;
                        this.OnPropertyChanged("postcode");
                    }
                }
                else {
                    this.postcodeField = value;
                    this.OnPropertyChanged("postcode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postcodeSpecified {
            get {
                return this.postcodeFieldSpecified;
            }
            set {
                if ((postcodeFieldSpecified.Equals(value) != true)) {
                    this.postcodeFieldSpecified = value;
                    this.OnPropertyChanged("postcodeSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThaiAddress));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThaiAddress object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThaiAddress object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThaiAddress object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThaiAddress obj, out System.Exception exception) {
            exception = null;
            obj = default(ThaiAddress);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThaiAddress obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThaiAddress Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThaiAddress)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThaiAddress object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThaiAddress object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThaiAddress object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThaiAddress obj, out System.Exception exception) {
            exception = null;
            obj = default(ThaiAddress);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThaiAddress obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThaiAddress LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThaiAddress object
        /// </summary>
        public virtual ThaiAddress Clone() {
            return ((ThaiAddress)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public partial class ThaiAddressVillage : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private uint numberField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        public uint number {
            get {
                return this.numberField;
            }
            set {
                if ((this.numberField != null)) {
                    if ((numberField.Equals(value) != true)) {
                        this.numberField = value;
                        this.OnPropertyChanged("number");
                    }
                }
                else {
                    this.numberField = value;
                    this.OnPropertyChanged("number");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThaiAddressVillage));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThaiAddressVillage object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThaiAddressVillage object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThaiAddressVillage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThaiAddressVillage obj, out System.Exception exception) {
            exception = null;
            obj = default(ThaiAddressVillage);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThaiAddressVillage obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThaiAddressVillage Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThaiAddressVillage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThaiAddressVillage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThaiAddressVillage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThaiAddressVillage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThaiAddressVillage obj, out System.Exception exception) {
            exception = null;
            obj = default(ThaiAddressVillage);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThaiAddressVillage obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThaiAddressVillage LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThaiAddressVillage object
        /// </summary>
        public virtual ThaiAddressVillage Clone() {
            return ((ThaiAddressVillage)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public partial class ThaiAddressTambon : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private uint geocodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        public uint geocode {
            get {
                return this.geocodeField;
            }
            set {
                if ((this.geocodeField != null)) {
                    if ((geocodeField.Equals(value) != true)) {
                        this.geocodeField = value;
                        this.OnPropertyChanged("geocode");
                    }
                }
                else {
                    this.geocodeField = value;
                    this.OnPropertyChanged("geocode");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThaiAddressTambon));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThaiAddressTambon object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThaiAddressTambon object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThaiAddressTambon object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThaiAddressTambon obj, out System.Exception exception) {
            exception = null;
            obj = default(ThaiAddressTambon);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThaiAddressTambon obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThaiAddressTambon Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThaiAddressTambon)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThaiAddressTambon object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThaiAddressTambon object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThaiAddressTambon object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThaiAddressTambon obj, out System.Exception exception) {
            exception = null;
            obj = default(ThaiAddressTambon);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThaiAddressTambon obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThaiAddressTambon LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThaiAddressTambon object
        /// </summary>
        public virtual ThaiAddressTambon Clone() {
            return ((ThaiAddressTambon)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public partial class OfficialEntry : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private OfficialType titleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int indexField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool indexFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string englishField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime beginField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool beginFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string endyearField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string beginyearField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime endField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool endFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool actingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool actingFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string commentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public OfficialType title {
            get {
                return this.titleField;
            }
            set {
                if ((titleField.Equals(value) != true)) {
                    this.titleField = value;
                    this.OnPropertyChanged("title");
                }
            }
        }
        
        public int index {
            get {
                return this.indexField;
            }
            set {
                if ((indexField.Equals(value) != true)) {
                    this.indexField = value;
                    this.OnPropertyChanged("index");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool indexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                if ((indexFieldSpecified.Equals(value) != true)) {
                    this.indexFieldSpecified = value;
                    this.OnPropertyChanged("indexSpecified");
                }
            }
        }
        
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("name");
                }
            }
        }
        
        public string english {
            get {
                return this.englishField;
            }
            set {
                if ((this.englishField != null)) {
                    if ((englishField.Equals(value) != true)) {
                        this.englishField = value;
                        this.OnPropertyChanged("english");
                    }
                }
                else {
                    this.englishField = value;
                    this.OnPropertyChanged("english");
                }
            }
        }
        
        public System.DateTime begin {
            get {
                return this.beginField;
            }
            set {
                if ((beginField.Equals(value) != true)) {
                    this.beginField = value;
                    this.OnPropertyChanged("begin");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool beginSpecified {
            get {
                return this.beginFieldSpecified;
            }
            set {
                if ((beginFieldSpecified.Equals(value) != true)) {
                    this.beginFieldSpecified = value;
                    this.OnPropertyChanged("beginSpecified");
                }
            }
        }
        
        public string endyear {
            get {
                return this.endyearField;
            }
            set {
                if ((this.endyearField != null)) {
                    if ((endyearField.Equals(value) != true)) {
                        this.endyearField = value;
                        this.OnPropertyChanged("endyear");
                    }
                }
                else {
                    this.endyearField = value;
                    this.OnPropertyChanged("endyear");
                }
            }
        }
        
        public string beginyear {
            get {
                return this.beginyearField;
            }
            set {
                if ((this.beginyearField != null)) {
                    if ((beginyearField.Equals(value) != true)) {
                        this.beginyearField = value;
                        this.OnPropertyChanged("beginyear");
                    }
                }
                else {
                    this.beginyearField = value;
                    this.OnPropertyChanged("beginyear");
                }
            }
        }
        
        public System.DateTime end {
            get {
                return this.endField;
            }
            set {
                if ((endField.Equals(value) != true)) {
                    this.endField = value;
                    this.OnPropertyChanged("end");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endSpecified {
            get {
                return this.endFieldSpecified;
            }
            set {
                if ((endFieldSpecified.Equals(value) != true)) {
                    this.endFieldSpecified = value;
                    this.OnPropertyChanged("endSpecified");
                }
            }
        }
        
        public bool acting {
            get {
                return this.actingField;
            }
            set {
                if ((actingField.Equals(value) != true)) {
                    this.actingField = value;
                    this.OnPropertyChanged("acting");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actingSpecified {
            get {
                return this.actingFieldSpecified;
            }
            set {
                if ((actingFieldSpecified.Equals(value) != true)) {
                    this.actingFieldSpecified = value;
                    this.OnPropertyChanged("actingSpecified");
                }
            }
        }
        
        public string comment {
            get {
                return this.commentField;
            }
            set {
                if ((this.commentField != null)) {
                    if ((commentField.Equals(value) != true)) {
                        this.commentField = value;
                        this.OnPropertyChanged("comment");
                    }
                }
                else {
                    this.commentField = value;
                    this.OnPropertyChanged("comment");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OfficialEntry));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OfficialEntry object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OfficialEntry object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OfficialEntry object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OfficialEntry obj, out System.Exception exception) {
            exception = null;
            obj = default(OfficialEntry);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OfficialEntry obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OfficialEntry Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OfficialEntry)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OfficialEntry object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OfficialEntry object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OfficialEntry object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OfficialEntry obj, out System.Exception exception) {
            exception = null;
            obj = default(OfficialEntry);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OfficialEntry obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OfficialEntry LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this OfficialEntry object
        /// </summary>
        public virtual OfficialEntry Clone() {
            return ((OfficialEntry)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public partial class OfficialList : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<OfficialEntry> officialField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string sourceField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// OfficialList class constructor
        /// </summary>
        public OfficialList() {
            this.officialField = new List<OfficialEntry>();
        }
        
        public List<OfficialEntry> official {
            get {
                return this.officialField;
            }
            set {
                if ((this.officialField != null)) {
                    if ((officialField.Equals(value) != true)) {
                        this.officialField = value;
                        this.OnPropertyChanged("official");
                    }
                }
                else {
                    this.officialField = value;
                    this.OnPropertyChanged("official");
                }
            }
        }
        
        public string source {
            get {
                return this.sourceField;
            }
            set {
                if ((this.sourceField != null)) {
                    if ((sourceField.Equals(value) != true)) {
                        this.sourceField = value;
                        this.OnPropertyChanged("source");
                    }
                }
                else {
                    this.sourceField = value;
                    this.OnPropertyChanged("source");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OfficialList));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OfficialList object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OfficialList object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OfficialList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OfficialList obj, out System.Exception exception) {
            exception = null;
            obj = default(OfficialList);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OfficialList obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OfficialList Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OfficialList)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OfficialList object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OfficialList object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OfficialList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OfficialList obj, out System.Exception exception) {
            exception = null;
            obj = default(OfficialList);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OfficialList obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OfficialList LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this OfficialList object
        /// </summary>
        public virtual OfficialList Clone() {
            return ((OfficialList)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    public partial class MyUri : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string commentField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private MyUriStatus statusField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public MyUri() {
            this.statusField = MyUriStatus.unknown;
        }
        
        public string comment {
            get {
                return this.commentField;
            }
            set {
                if ((this.commentField != null)) {
                    if ((commentField.Equals(value) != true)) {
                        this.commentField = value;
                        this.OnPropertyChanged("comment");
                    }
                }
                else {
                    this.commentField = value;
                    this.OnPropertyChanged("comment");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(MyUriStatus.unknown)]
        public MyUriStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.OnPropertyChanged("status");
                }
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute(DataType="anyURI")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("Value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MyUri));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MyUri object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MyUri object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MyUri object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MyUri obj, out System.Exception exception) {
            exception = null;
            obj = default(MyUri);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MyUri obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MyUri Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MyUri)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MyUri object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MyUri object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MyUri object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MyUri obj, out System.Exception exception) {
            exception = null;
            obj = default(MyUri);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MyUri obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MyUri LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this MyUri object
        /// </summary>
        public virtual MyUri Clone() {
            return ((MyUri)(this.MemberwiseClone()));
        }
        #endregion
    }
}
